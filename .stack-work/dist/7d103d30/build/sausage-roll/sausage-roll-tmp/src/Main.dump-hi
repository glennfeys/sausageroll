
==================== FINAL INTERFACE ====================
2018-11-18 13:36:33.4692384 UTC

interface main:Main 8043
  interface hash: e62a889cc60e8ff0102fc2a654acad11
  ABI hash: 51f1e20c3b91a84f4462adb312567e59
  export-list hash: 0da94c315986e4691d6547c0b3e7ecdf
  orphan hash: 016d8145383b72ee2dbef0b4b14a7fcd
  flag hash: 481ca46c6b96d610221b7c9f567bebb1
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
module dependencies:
package dependencies: GLURaw-2.0.0.4 GLUT-2.7.0.14
                      ObjectName-1.1.0.1 OpenGL-3.0.2.2 OpenGLRaw-3.3.1.0
                      StateVar-1.1.1.1 array-0.5.2.0 base-4.11.1.0 binary-0.8.5.1
                      bmp-1.2.6.3 bytestring-0.10.8.2 containers-0.5.11.0 deepseq-1.4.3.0
                      fixed-0.2.1.1 ghc-boot-th-8.4.3 ghc-prim-0.5.2.0 gloss-1.12.0.0
                      gloss-rendering-1.12.0.0 half-0.3 integer-gmp-1.0.2.0
                      pretty-1.1.3.6 stm-2.4.5.0 template-haskell-2.13.0.0 text-1.2.3.0
orphans: stm-2.4.5.0:Control.Monad.STM text-1.2.3.0:Data.Text
         binary-0.8.5.1:Data.Binary.Generic text-1.2.3.0:Data.Text.Show
         bytestring-0.10.8.2:Data.ByteString.Builder base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type half-0.3:Numeric.Half
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text
import  -/  base-4.11.1.0:Data.Foldable 6cf3e918f22d03c0870804f05cd183d1
import  -/  base-4.11.1.0:Data.Maybe 1f53643457b97538ca6f4ca7328e8b30
import  -/  base-4.11.1.0:Data.OldList 3987872d5de68d40c22cd1c30825ad08
import  -/  base-4.11.1.0:GHC.Base b7dd14d8fe8d606dde5678ea6b0575e9
import  -/  base-4.11.1.0:GHC.List 95910b50fba2204d1a3364fe070ebf2b
import  -/  base-4.11.1.0:GHC.Num 5de8df0185e7e8d8ec29b3c61e2c8606
import  -/  base-4.11.1.0:GHC.Real 032ed0a1053f878238d78e95e75f2edf
import  -/  base-4.11.1.0:GHC.Show 6211aec7cccd267a5ee999e4414d7b90
import  -/  base-4.11.1.0:Prelude aca391812f777207b15d62bb5b9feb63
import  -/  base-4.11.1.0:System.Environment 40e596440ae829e459888fac38f65a65
import  -/  base-4.11.1.0:System.IO 7331ec6891ba7763ad75720258619382
import  -/  ghc-prim-0.5.2.0:GHC.Classes f7d67fd97d5a20e9252c9597d1aa387b
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  gloss-1.12.0.0:Graphics.Gloss 1077e138f0da1cbf3ce7f8182767138e
import  -/  gloss-1.12.0.0:Graphics.Gloss.Data.Color 54d4854134e9bda7e85aa68062fec60a
import  -/  gloss-1.12.0.0:Graphics.Gloss.Data.Display 858ea642e5196b1f0dc6531d4b39ba91
import  -/  gloss-1.12.0.0:Graphics.Gloss.Data.Picture 72172f43d9ee2707f6a70a3ae14bd270
import  -/  gloss-1.12.0.0:Graphics.Gloss.Interface.Pure.Game 20f22db3458eb78dbf3be2a75ff5a428
import  -/  gloss-1.12.0.0:Graphics.Gloss.Internals.Interface.Backend.Types ea34db88684036e4af481008ddc4afdc
import  -/  gloss-1.12.0.0:Graphics.Gloss.Internals.Interface.Event e5e277dc01112b7f1f0be05e6d98a824
import  -/  gloss-rendering-1.12.0.0:Graphics.Gloss.Internals.Data.Color 96678330ea584db1a7019ebc40d511c5
import  -/  gloss-rendering-1.12.0.0:Graphics.Gloss.Internals.Data.Picture f2ab652b23d355c6b7c2e8b7091b25b5
2fb5ce09ab71b70230ff5e2527cc1153
  $fEqFieldType :: GHC.Classes.Eq Main.FieldType
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.FieldType Main.$fEqFieldType_$c== Main.$fEqFieldType_$c/= -}
2fb5ce09ab71b70230ff5e2527cc1153
  $fEqFieldType_$c/= ::
    Main.FieldType -> Main.FieldType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Main.FieldType) (y :: Main.FieldType) ->
                 case x of wild {
                   Main.Water
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True Main.Water -> GHC.Types.False }
                   Main.Grass
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True Main.Grass -> GHC.Types.False }
                   Main.Grill
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True Main.Grill -> GHC.Types.False } }) -}
2fb5ce09ab71b70230ff5e2527cc1153
  $fEqFieldType_$c== ::
    Main.FieldType -> Main.FieldType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds2 :: Main.FieldType) (ds3 :: Main.FieldType) ->
                 case ds2 of wild {
                   Main.Water
                   -> case ds3 of wild1 {
                        DEFAULT -> GHC.Types.False Main.Water -> GHC.Types.True }
                   Main.Grass
                   -> case ds3 of wild1 {
                        DEFAULT -> GHC.Types.False Main.Grass -> GHC.Types.True }
                   Main.Grill
                   -> case ds3 of wild1 {
                        DEFAULT -> GHC.Types.False Main.Grill -> GHC.Types.True } }) -}
501eba16f71dd635cc4de0d5c6210a35
  $fEqSausage :: GHC.Classes.Eq Main.Sausage
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.Sausage Main.$fEqSausage_$c== Main.$fEqSausage_$c/= -}
501eba16f71dd635cc4de0d5c6210a35
  $fEqSausage_$c/= :: Main.Sausage -> Main.Sausage -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S(S)L)LLL),1*U(1*U(1*U(U),1*U(U)),1*U,1*U,1*U(1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U))))><S(S(S(S)L)LLL),1*U(1*U(1*U(U),1*U(U)),1*U,1*U,1*U(1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U))))>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Main.Sausage) (y :: Main.Sausage) ->
                 case Main.$fEqSausage_$c== x y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
501eba16f71dd635cc4de0d5c6210a35
  $fEqSausage_$c== :: Main.Sausage -> Main.Sausage -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S(S)L)LLL),1*U(1*U(1*U(U),1*U(U)),1*U,1*U,1*U(1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U))))><S(S(S(S)L)LLL),1*U(1*U(1*U(U),1*U(U)),1*U,1*U,1*U(1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U))))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Main.Sausage) (w1 :: Main.Sausage) ->
                 case w of ww { Main.Sausage ww1 ww2 ww3 ww4 ->
                 case ww1 of ww5 { (,) ww6 ww7 ->
                 case ww6 of ww8 { GHC.Types.I# ww9 ->
                 case w1 of ww10 { Main.Sausage ww11 ww12 ww13 ww14 ->
                 case ww11 of ww15 { (,) ww16 ww17 ->
                 case ww16 of ww18 { GHC.Types.I# ww19 ->
                 Main.$w$c==
                   ww9
                   ww7
                   ww2
                   ww3
                   ww4
                   ww19
                   ww17
                   ww12
                   ww13
                   ww14 } } } } } }) -}
343c1201e9872902d7e20534a3572dfa
  $fShowField :: GHC.Show.Show Main.Field
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.Field
                  Main.$fShowField_$cshowsPrec
                  Main.$fShowField_$cshow
                  Main.$fShowField_$cshowList -}
343c1201e9872902d7e20534a3572dfa
  $fShowField1 :: Main.Field -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(1*U,1*U(1*U(U),1*U(U)))><L,U>,
     Unfolding: (\ (w :: Main.Field) (w1 :: GHC.Base.String) ->
                 case w of ww { Main.Field ww1 ww2 ->
                 Main.$w$cshowsPrec 0# ww1 ww2 w1 }) -}
802872dccc72e5f5155d9cf0128003ca
  $fShowField2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
2fb5ce09ab71b70230ff5e2527cc1153
  $fShowFieldType :: GHC.Show.Show Main.FieldType
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.FieldType
                  Main.$fShowFieldType_$cshowsPrec
                  Main.$fShowFieldType_$cshow
                  Main.$fShowFieldType_$cshowList -}
53b2b8b21578fcd188e7d6a0399deffa
  $fShowFieldType1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.$fShowFieldType2) -}
b10e2a78ce8300c19f6b4afe76b503af
  $fShowFieldType2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Grill"#) -}
19589cf8eecf863040665816d95106f5
  $fShowFieldType3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.$fShowFieldType4) -}
45e65b0e273612f3ea5983fbcf6fd696
  $fShowFieldType4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Grass"#) -}
4a6e9b162c59f00c078e46a6c618a6d9
  $fShowFieldType5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.$fShowFieldType6) -}
815908b0c40ace7447d67a01e3835b8b
  $fShowFieldType6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Water"#) -}
2fb5ce09ab71b70230ff5e2527cc1153
  $fShowFieldType_$cshow :: Main.FieldType -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Main.FieldType) ->
                 case x of wild {
                   Main.Water -> Main.$fShowFieldType5
                   Main.Grass -> Main.$fShowFieldType3
                   Main.Grill -> Main.$fShowFieldType1 }) -}
2fb5ce09ab71b70230ff5e2527cc1153
  $fShowFieldType_$cshowList :: [Main.FieldType] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Main.FieldType]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Main.FieldType Main.$w$cshowsPrec1 ls s) -}
2fb5ce09ab71b70230ff5e2527cc1153
  $fShowFieldType_$cshowsPrec ::
    GHC.Types.Int -> Main.FieldType -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: [0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Main.FieldType)
                   (w2 :: GHC.Base.String) ->
                 Main.$w$cshowsPrec1 w1 w2) -}
343c1201e9872902d7e20534a3572dfa
  $fShowField_$cshow :: Main.Field -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U(1*U(U),1*U(U)))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Main.Field) ->
                 Main.$fShowField_$cshowsPrec
                   Main.$fShowField2
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
343c1201e9872902d7e20534a3572dfa
  $fShowField_$cshowList :: [Main.Field] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Main.Field]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Main.Field Main.$fShowField1 ls s) -}
343c1201e9872902d7e20534a3572dfa
  $fShowField_$cshowsPrec ::
    GHC.Types.Int -> Main.Field -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U(1*U(U),1*U(U)))><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Main.Field)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Main.Field ww3 ww4 ->
                 Main.$w$cshowsPrec ww1 ww3 ww4 w2 } }) -}
501eba16f71dd635cc4de0d5c6210a35
  $fShowSausage :: GHC.Show.Show Main.Sausage
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.Sausage
                  Main.$fShowSausage_$cshowsPrec
                  Main.$fShowSausage_$cshow
                  Main.$fShowSausage_$cshowList -}
501eba16f71dd635cc4de0d5c6210a35
  $fShowSausage1 :: Main.Sausage -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S,1*U(1*U(1*U(U),1*U(U)),1*U,1*U,1*U(1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U))))><L,U>,
     Unfolding: (\ (w :: Main.Sausage) (w1 :: GHC.Base.String) ->
                 case w of ww { Main.Sausage ww1 ww2 ww3 ww4 ->
                 Main.$w$cshowsPrec2 0# ww1 ww2 ww3 ww4 w1 }) -}
501eba16f71dd635cc4de0d5c6210a35
  $fShowSausage_$cshow :: Main.Sausage -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S,1*U(1*U(1*U(U),1*U(U)),1*U,1*U,1*U(1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U))))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Main.Sausage) ->
                 Main.$fShowSausage_$cshowsPrec
                   Main.$fShowField2
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
501eba16f71dd635cc4de0d5c6210a35
  $fShowSausage_$cshowList :: [Main.Sausage] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Main.Sausage]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Main.Sausage Main.$fShowSausage1 ls s) -}
501eba16f71dd635cc4de0d5c6210a35
  $fShowSausage_$cshowsPrec ::
    GHC.Types.Int -> Main.Sausage -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <S(S),1*U(U)><S,1*U(1*U(1*U(U),1*U(U)),1*U,1*U,1*U(1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U))))><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Main.Sausage)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Main.Sausage ww3 ww4 ww5 ww6 ->
                 Main.$w$cshowsPrec2 ww1 ww3 ww4 ww5 ww6 w2 } }) -}
8979c37c07d7a02db1391a5c8dcbcff9
  $s$fEq(,) :: GHC.Classes.Eq (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Types.Int, GHC.Types.Int)
                  (GHC.Classes.$fEq(,)_$c==
                     @ GHC.Types.Int
                     @ GHC.Types.Int
                     GHC.Classes.$fEqInt
                     GHC.Classes.$fEqInt)
                  Main.$s$fEq(,)_$s$fEq(,)_$c/= -}
d9c29de69e24759049df94d820948480
  $s$fEq(,)_$s$fEq(,)_$c/= ::
    (GHC.Types.Int, GHC.Types.Int)
    -> (GHC.Types.Int, GHC.Types.Int) -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),1*U(U))><S(S(S)L),1*U(1*U(U),1*U(U))>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: (GHC.Types.Int, GHC.Types.Int))
                   (y :: (GHC.Types.Int, GHC.Types.Int)) ->
                 case x of wild { (,) a1 a2 ->
                 case y of wild1 { (,) b1 b2 ->
                 case GHC.Classes.eqInt a1 b1 of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True
                   -> case GHC.Classes.eqInt a2 b2 of wild3 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True -> GHC.Types.False } } } }) -}
26bb3a62063a12953e730a468ac9280d
  $tc'Board :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12315698473499459259##
                   5402746082248414331##
                   Main.$trModule
                   Main.$tc'Board2
                   0#
                   Main.$tc'Board1) -}
f05b0c035db8101a09bb9377f95ed0c4
  $tc'Board1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
5e12434250b8a40d39a74bf590d7fdf7
  $tc'Board2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Board3) -}
cfc8181c12a86cb086fa5eadbafd82dd
  $tc'Board3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Board"#) -}
cb55bcd52e72aeb67593a487364e3741
  $tc'Field :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8434541297886713286##
                   6881143473616788290##
                   Main.$trModule
                   Main.$tc'Field2
                   0#
                   Main.$tc'Field1) -}
c9ee79a88e8605ae4fa2dddf0c1ad770
  $tc'Field1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
70b144d3141d6d09693aa7cd9aae33c6
  $tc'Field2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Field3) -}
371a659fa7da4f7a54e1a30dd7185e5b
  $tc'Field3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Field"#) -}
17dea3f630722878a277750f567c3589
  $tc'Grass :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3953973743955099578##
                   16603469016141659227##
                   Main.$trModule
                   Main.$tc'Grass2
                   0#
                   Main.$tc'Grass1) -}
0a353193281ada483beb23b67063fd9b
  $tc'Grass1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
ca905da591e8f4c4eee99accb974118b
  $tc'Grass2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Grass3) -}
29aa041e2bcb33032751e8e117b35f83
  $tc'Grass3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Grass"#) -}
3948b03eff5d081feabbd80c14f60f8b
  $tc'Grill :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7002910463555395293##
                   8131608046005270800##
                   Main.$trModule
                   Main.$tc'Grill1
                   0#
                   Main.$tc'Grass1) -}
a3fa1e757ee0a50c8717f3ee20b74ae4
  $tc'Grill1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Grill2) -}
a4a1d450e919f3883be740dce73f4faa
  $tc'Grill2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Grill"#) -}
76b192b22784dede5f99b334ccf3e0a0
  $tc'Player :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13209386360748260749##
                   5595969130354866330##
                   Main.$trModule
                   Main.$tc'Player2
                   0#
                   Main.$tc'Player1) -}
f3f41660cab5f0efed484dba9b01bf28
  $tc'Player1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
f3f04427cd5fcdc9d0ddc8f33e645a4a
  $tc'Player2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Player3) -}
043bc3164d93045e583268437ccac183
  $tc'Player3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Player"#) -}
b123bbee479eb45441f46f538d9408b4
  $tc'Sausage :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16421573438612284902##
                   11928136333582628622##
                   Main.$trModule
                   Main.$tc'Sausage2
                   0#
                   Main.$tc'Sausage1) -}
ed759271e023b1ccd36924df693a7645
  $tc'Sausage1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
bbf6e197503225fc433ceadcde10ad48
  $tc'Sausage2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Sausage3) -}
ae75fce9d3cc6e8ec55647be95abe709
  $tc'Sausage3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Sausage"#) -}
344685f509bf5e5ea682a1bf0d2637af
  $tc'Water :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8032831001908793265##
                   8991232256692650132##
                   Main.$trModule
                   Main.$tc'Water1
                   0#
                   Main.$tc'Grass1) -}
a95adba3d252beebe4fb8f1414762a2c
  $tc'Water1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Water2) -}
46a79d5f301eb3ddd0f211dc6642e104
  $tc'Water2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Water"#) -}
e7480292a139db6f7097d25db3b889bb
  $tcBoard :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2927892767523050995##
                   14477660349068654718##
                   Main.$trModule
                   Main.$tcBoard1
                   0#
                   GHC.Types.krep$*) -}
9752ed3138e971d00731bb7af189bc44
  $tcBoard1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcBoard2) -}
bba03234cbf4bc6c89ffb9b1f0e5c4e0
  $tcBoard2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Board"#) -}
0bfa4a158c6e6835e0b119e63a2a4798
  $tcField :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15684366115871935822##
                   10609619603995734428##
                   Main.$trModule
                   Main.$tcField1
                   0#
                   GHC.Types.krep$*) -}
024576cc089a65e43bfd7dfbf73bce67
  $tcField1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcField2) -}
0d50b9ff5a749bd39212f7204f22d158
  $tcField2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Field"#) -}
d26fe5317545f978b656d29b1ea86115
  $tcFieldType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15646102726227414379##
                   15128851699331211488##
                   Main.$trModule
                   Main.$tcFieldType1
                   0#
                   GHC.Types.krep$*) -}
2f85d07dfde76424b21fbc41be066eca
  $tcFieldType1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcFieldType2) -}
e35d34d44144174b575a16ae0ccf0f2c
  $tcFieldType2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("FieldType"#) -}
68cc6d1e0dc0b9c08720f1015ffe2388
  $tcPlayer :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7125036960996631716##
                   3756436856428232335##
                   Main.$trModule
                   Main.$tcPlayer1
                   0#
                   GHC.Types.krep$*) -}
d5d27a970841519ac24afc7d2697de8c
  $tcPlayer1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcPlayer2) -}
152ca3436cb57a8eff79942f69cbbf09
  $tcPlayer2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Player"#) -}
5293771e81df7657c7000236316ffcbe
  $tcSausage :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2932136651517683634##
                   2216728053801916667##
                   Main.$trModule
                   Main.$tcSausage1
                   0#
                   GHC.Types.krep$*) -}
7f6b15175799124650d01862aa557ef1
  $tcSausage1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcSausage2) -}
19a3be8e3b262b35886ad95469f53025
  $tcSausage2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Sausage"#) -}
be86c9d078d3acbf19ba91fe74a24273
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
b09d86f2c49dd5176b544d8d13ddb6c5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
23b03bd7d075a00f5ad1ee10e6add7b8
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
3d3b700d4d58f58e5d0d17b872208dec
  $w$c== ::
    GHC.Prim.Int#
    -> GHC.Types.Int
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> (Main.State, Main.State)
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> (Main.State, Main.State)
    -> GHC.Types.Bool
  {- Arity: 10, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><L,1*U><L,1*U><L,1*U(1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)))><S,U><L,1*U(U)><L,1*U><L,1*U><L,1*U(1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)))>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Types.Int)
                   (ww2 :: GHC.Types.Bool)
                   (ww3 :: GHC.Types.Bool)
                   (ww4 :: (Main.State, Main.State))
                   (ww5 :: GHC.Prim.Int#)
                   (ww6 :: GHC.Types.Int)
                   (ww7 :: GHC.Types.Bool)
                   (ww8 :: GHC.Types.Bool)
                   (ww9 :: (Main.State, Main.State)) ->
                 case GHC.Prim.==# ww ww5 of lwild {
                   DEFAULT -> GHC.Types.False
                   1#
                   -> case ww1 of wild { GHC.Types.I# x ->
                      case ww6 of wild1 { GHC.Types.I# y ->
                      case GHC.Prim.==# x y of lwild1 {
                        DEFAULT -> GHC.Types.False
                        1#
                        -> let {
                             $j :: GHC.Types.Bool <join 0>
                             = case ww3 of wild2 {
                                 GHC.Types.False
                                 -> case ww8 of wild3 {
                                      GHC.Types.False
                                      -> case ww4 of ww10 { (,) ww11 ww12 ->
                                         case ww9 of ww13 { (,) ww14 ww15 ->
                                         case ww11 of ww16 { (,) ww17 ww18 ->
                                         case ww14 of ww19 { (,) ww20 ww21 ->
                                         case ww17 of wild4 { GHC.Types.I# x1 ->
                                         case ww20 of wild5 { GHC.Types.I# y1 ->
                                         case GHC.Prim.==# x1 y1 of lwild2 {
                                           DEFAULT -> GHC.Types.False
                                           1#
                                           -> case ww18 of wild6 { GHC.Types.I# x2 ->
                                              case ww21 of wild7 { GHC.Types.I# y2 ->
                                              case GHC.Prim.==# x2 y2 of lwild3 {
                                                DEFAULT -> GHC.Types.False
                                                1#
                                                -> case ww12 of ww22 { (,) ww23 ww24 ->
                                                   case ww15 of ww25 { (,) ww26 ww27 ->
                                                   case ww23 of wild8 { GHC.Types.I# x3 ->
                                                   case ww26 of wild9 { GHC.Types.I# y3 ->
                                                   case GHC.Prim.==# x3 y3 of lwild4 {
                                                     DEFAULT -> GHC.Types.False
                                                     1#
                                                     -> GHC.Classes.eqInt
                                                          ww24
                                                          ww27 } } } } } } } } } } } } } } }
                                      GHC.Types.True -> GHC.Types.False }
                                 GHC.Types.True
                                 -> case ww8 of wild3 {
                                      GHC.Types.False -> GHC.Types.False
                                      GHC.Types.True
                                      -> case ww4 of ww10 { (,) ww11 ww12 ->
                                         case ww9 of ww13 { (,) ww14 ww15 ->
                                         case ww11 of ww16 { (,) ww17 ww18 ->
                                         case ww14 of ww19 { (,) ww20 ww21 ->
                                         case ww17 of wild4 { GHC.Types.I# x1 ->
                                         case ww20 of wild5 { GHC.Types.I# y1 ->
                                         case GHC.Prim.==# x1 y1 of lwild2 {
                                           DEFAULT -> GHC.Types.False
                                           1#
                                           -> case ww18 of wild6 { GHC.Types.I# x2 ->
                                              case ww21 of wild7 { GHC.Types.I# y2 ->
                                              case GHC.Prim.==# x2 y2 of lwild3 {
                                                DEFAULT -> GHC.Types.False
                                                1#
                                                -> case ww12 of ww22 { (,) ww23 ww24 ->
                                                   case ww15 of ww25 { (,) ww26 ww27 ->
                                                   case ww23 of wild8 { GHC.Types.I# x3 ->
                                                   case ww26 of wild9 { GHC.Types.I# y3 ->
                                                   case GHC.Prim.==# x3 y3 of lwild4 {
                                                     DEFAULT -> GHC.Types.False
                                                     1#
                                                     -> GHC.Classes.eqInt
                                                          ww24
                                                          ww27 } } } } } } } } } } } } } } } } }
                           } in
                           case ww2 of wild2 {
                             GHC.Types.False
                             -> case ww7 of wild3 {
                                  GHC.Types.False -> $j GHC.Types.True -> GHC.Types.False }
                             GHC.Types.True
                             -> case ww7 of wild3 {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True -> $j } } } } } }) -}
546102d5123d22c7fba85588dfcad19d
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> Main.FieldType
    -> Main.Coordinate
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 4, Strictness: <S,U><L,1*U><L,1*U(1*U(U),1*U(U))><L,U>,
     Inline: [0] -}
2fb5ce09ab71b70230ff5e2527cc1153
  $w$cshowsPrec1 ::
    Main.FieldType -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: Main.FieldType) (w1 :: GHC.Base.String) ->
                 case w of wild {
                   Main.Water -> GHC.Base.++ @ GHC.Types.Char Main.$fShowFieldType5 w1
                   Main.Grass -> GHC.Base.++ @ GHC.Types.Char Main.$fShowFieldType3 w1
                   Main.Grill
                   -> GHC.Base.++ @ GHC.Types.Char Main.$fShowFieldType1 w1 }) -}
8aa068e22bf912133f6e9267a1d68c80
  $w$cshowsPrec2 ::
    GHC.Prim.Int#
    -> Main.Coordinate
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> (Main.State, Main.State)
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 6,
     Strictness: <S,U><L,1*U(1*U(U),1*U(U))><L,1*U><L,1*U><L,1*U(1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)))><L,U>,
     Inline: [0] -}
e79cb10c32cb498305dd26235a449ed9
  data Board
    = Board [[Main.Field]] [Main.Sausage] Main.Player GHC.Types.Bool
1f945eeb632dd28f4c31023a03af729c
  type Coordinate = (GHC.Types.Int, GHC.Types.Int)
e08106eb93398b9f22ffa7e51de3ebde
  type Direction = (GHC.Types.Int, GHC.Types.Int)
343c1201e9872902d7e20534a3572dfa
  data Field = Field Main.FieldType Main.Coordinate
2fb5ce09ab71b70230ff5e2527cc1153
  data FieldType = Water | Grass | Grill
1b7fb5a7fc8b2172f7d80cf1e6173ad4
  data Player = Player Main.Direction Main.Coordinate
501eba16f71dd635cc4de0d5c6210a35
  data Sausage
    = Sausage Main.Coordinate
              GHC.Types.Bool
              GHC.Types.Bool
              (Main.State, Main.State)
6330f9aed11bc4c246f17d3cc7d6af3a
  type State = (GHC.Types.Int, GHC.Types.Int)
b4f9ae97a091b232a88173a93240314d
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
529073e95d7e97cca9b9c5c633464b51
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U> -}
0424d1a3a877cf57ce74402b0e9fe252
  main2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
instance GHC.Classes.Eq [Main.FieldType] = Main.$fEqFieldType
instance GHC.Classes.Eq [Main.Sausage] = Main.$fEqSausage
instance GHC.Show.Show [Main.Field] = Main.$fShowField
instance GHC.Show.Show [Main.FieldType] = Main.$fShowFieldType
instance GHC.Show.Show [Main.Sausage] = Main.$fShowSausage
"SPEC/Main $fEq(,) @ Int @ Int" [orphan] forall (v1 :: GHC.Classes.Eq
                                                         GHC.Types.Int)
                                                (v :: GHC.Classes.Eq GHC.Types.Int)
  GHC.Classes.$fEq(,) @ GHC.Types.Int @ GHC.Types.Int v v1
  = Main.$s$fEq(,)
"SPEC/Main $fEq(,)_$c/= @ Int @ Int" [orphan] forall ($dEq1 :: GHC.Classes.Eq
                                                                 GHC.Types.Int)
                                                     ($dEq :: GHC.Classes.Eq GHC.Types.Int)
  GHC.Classes.$fEq(,)_$c/= @ GHC.Types.Int @ GHC.Types.Int $dEq $dEq1
  = Main.$s$fEq(,)_$s$fEq(,)_$c/=
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

